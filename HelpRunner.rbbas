#tag ModuleProtected Module HelpRunner	#tag Method, Flags = &h1		Protected Sub AddToWinHelpMenu(hmItemText As String, parentMenu As MenuItem)		  // Add New MenuItem to HelpMenu		  		  #if TargetWin32 then		    		    Dim m as HelpRunnerMenuItem		    		    m = new HelpRunnerMenuItem( hmItemText )		    		    parentMenu.Child( "HelpMenu" ).Append( m )		    		  #Endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function CreateWinHelpMenu(parentMenu As MenuItem) As Boolean		  // Add Help Menu in MenuBar		  		  #if TargetWin32 then		    		    Dim HelpMenu As New MenuItem		    		    HelpMenu.Text = "Help"		    HelpMenu.AutoEnable = True		    		    parentMenu.Append( HelpMenu )		    		    Return True		    		  #Endif		  		Exception		  Return False		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub HelpError(errmsg As String)		  //If errors occur when any of HelpRunner's methods are called,		  //then the error messages are sent here as a String.		  //Customize this method to meet your own error handling needs.		  		  Beep		  MsgBox errmsg		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub HelpMenuHandler(hmItemText As String)		  //Customize the following code to handle Win32 help menu item selections.		  		  Select Case hmItemText		    		  case "HelpRunner Help"		    		    #if TargetWin32 then		      		      HelpRunner.OpenWinCHM("introduction.html", "HelpRunner Help.chm", Nil)		      		    #Endif		    		  End select		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub OpenAppleHelp(pagePath as string, anchorName as string)		  //Original code courtesy of Charles Yeomans.		  //Customized by Electric Butterfly.		  		  // Open a specific page in your help book.		  // If pagePath is "", it opens the main help page.		  // If anchorName is "", it goes to the top of the page.		  		  #if TargetCarbon then //Mac OS X.		    If AHRegistered then //Help Book was already registered with Mac OS, so we can safely access the Help Book.		      		      #if TargetMachO then		        Const clibname = "Carbon"		      #Else		        Const clibname = "CarbonLib"		      #Endif		      		      Soft Declare Function CFBundleGetMainBundle Lib clibname () as Ptr		      		      dim mainBundle as Ptr = CFBundleGetMainBundle		      if mainBundle = nil then		        HelpError("Unable to locate the help files.")		        Return		      end if		      		      Soft Declare Function CFBundleGetValueForInfoDictionaryKey Lib clibname (bundle as Ptr, key as CFStringRef) as Ptr		      Soft Declare Function CFGetTypeID Lib clibname (cf as Ptr) as Integer		      Soft Declare Function CFStringGetTypeID Lib clibname () as Integer		      		      dim bookName as Ptr = CFBundleGetValueForInfoDictionaryKey (mainBundle, "CFBundleHelpBookName")		      if bookName = nil  or CFGetTypeID(bookName) <> CFStringGetTypeID then		        HelpError("Unable to locate the help files.")		        Return		      end if		      		      Soft Declare Function AHGotoPage Lib clibname (bookName as Ptr, path as CFStringRef, anchor as CFStringRef) as Integer		      		      dim OSError as Integer = AHGotoPage(bookName, pagePath, anchorName)		      if OSError <> 0 then		        HelpError("Unable to locate the help files.")		      end if		      		    End If		  #Endif		  		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Sub OpenWinCHM(pagePath as String, CHMname As String, parentWindow as Window)		  //Original code courtesy of Adam Ernst and Martin Honeywill.		  //Customized by Electric Butterfly.		  		  // Open the application's CHM help file.		  		  #if TargetWin32 then		    		    Declare Function HtmlHelp Lib "hhctrl.ocx" Alias "HtmlHelpA" (hwnd as Integer, url as Ptr, command as Integer, data as integer) as Integer		    Declare Function GetDesktopWindow Lib "user32" () As Integer		    		    dim f as FolderItem		    f = GetFolderItem( CHMname ) //such as "MyAppHelp.chm"		    if f is nil then		      HelpError("Error loading help.")		      return		    end if		    		    dim theHandle as Integer		    		    if parentWindow <> Nil then		      theHandle = parentWindow.Handle		    else		      theHandle = GetDesktopWindow()		    end if		    		    if pagePath <> "" then		      pagePath = "::/"+pagePath  //default help page.		    end if		    		    dim theURL as MemoryBlock		    theURL = new MemoryBlock(LenB(f.AbsolutePath)+lenb(pagePath)+16)		    theURL.CString(0) = f.AbsolutePath + pagePath		    		    if HTMLHelp(theHandle, theURL, 0, 0) = 0 then		      HelpError("Error loading help.")		    end if		    		  #Endif		End Sub	#tag EndMethod	#tag Method, Flags = &h1		Protected Function RegisterAppleHelp() As Boolean		  //Original code courtesy of Charles Yeomans and Thomas Reed.		  //Customized by Electric Butterfly.		  		  //Call this method from your App.Open event.		  //If it returns TRUE, then the Help Book was registered sucessfully.		  //If it returns FALSE, then an error occur and it was NOT registered.		  		  #if TargetCarbon then //Mac OS X.		    		    dim bundleRef as Integer		    dim urlRef as Integer		    dim FSRef as MemoryBlock		    dim OSErr as Integer		    		    AHRegistered = False //default setting, until registration is completed.		    		    #if TargetMachO then		      Const clibname = "Carbon"		    #Else		      Const clibname = "CarbonLib"		    #Endif		    		    #if debugBuild then		      // Can't register help because the app isn't in a valid bundle		      AHRegistered = False		      Return False		    #endif		    		    Declare Function CFBundleGetMainBundle Lib clibname () as Integer		    Declare Function CFBundleCopyBundleURL Lib clibname (bundleRef as Integer) as Integer		    Declare Function CFURLGetFSRef Lib clibname (urlRef as Integer, fs as Ptr) as Boolean		    Declare Function AHRegisterHelpBook Lib clibname (fs as Ptr) as Integer		    Declare Sub CFRelease Lib clibname (address as Integer)		    		    bundleRef = CFBundleGetMainBundle()		    If bundleRef = 0 then		      HelpError("Help Book was not successfully registered. (bundleRef=0)")		      AHRegistered = False		      Return False		    End if		    urlRef = CFBundleCopyBundleURL(bundleRef)		    If urlRef = 0 then		      HelpError("Help Book was not successfully registered. (urlRef=0)")		      AHRegistered = False		      Return False		    End if		    		    FSRef = NewMemoryBlock(80)		    If CFURLGetFSRef(urlRef, FSRef) then		      OSErr = AHRegisterHelpBook(FSRef)		      If OSErr <> 0 then		        HelpError("Help Book was not successfully registered. (OS Error: " + Str(OSErr) + ")")		        AHRegistered = False		        Return False		      Else		        If urlRef <> 0 then		          CFRelease urlRef		        End if		        AHRegistered = True		        Return True //Help Book was successfully registered!		      End if		    Else		      HelpError("Help Book was not successfully registered.")		      AHRegistered = False		      Return False		    End if		    		  #Else		    AHRegistered = False		    Return False		  #Endif		End Function	#tag EndMethod	#tag Property, Flags = &h21		Private AHRegistered As Boolean	#tag EndProperty	#tag Constant, Name = Version, Type = String, Dynamic = False, Default = \"1.2", Scope = Protected	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule